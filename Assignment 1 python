{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "engaged-measure",
   "metadata": {},
   "source": [
    "#                            ASSIGNMENT  1 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "stunning-diagnosis",
   "metadata": {},
   "source": [
    "# 1.below elements which are values and expressions\n",
    "6,\"hello\" are the integers and string values and +*/- are the expressions and -87.8 is the floating number"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "delayed-northern",
   "metadata": {},
   "source": [
    "# 2.string and variable differenece\n",
    "string is a  set of characters always place with quotes' or \"\n",
    "variable is used to store the values or characters for dynamic uses"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "italian-acceptance",
   "metadata": {},
   "source": [
    "# 3.three different data types\n",
    "integer = used to have numerical values\n",
    "strings = used to have characters\n",
    "float = used to have values which need of prescision that means accuarte one\n",
    "boolean = TRUE , False"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "colonial-arrest",
   "metadata": {},
   "source": [
    "# 4.how expressions made up of\n",
    "expressions are made up of all variables,classes,strings,boolean etc\n",
    "they give results in whatever type we want like int,str,boolean etc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "iraqi-turning",
   "metadata": {},
   "source": [
    "# 5.expression and statements\n",
    "expressions are like syntax which perform to give results\n",
    "where statements are like command which executes those syntax ex=print,if statements\n",
    "spam= 10 its just expression if we print(spam) it gives results where expression and statement combines to give actual output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "typical-summit",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 6.bacoon code\n",
    "bacoon = 22\n",
    "bacoon + 1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "formal-movement",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'spamspamspam'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#7.\n",
    "\"spam\";\"spamspam\"\n",
    "'spam' * 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "warming-maryland",
   "metadata": {},
   "outputs": [],
   "source": [
    "#8\n",
    "eggs are valid variable than 100 because a variable name cannot be integer it can only be character"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "separate-craps",
   "metadata": {},
   "outputs": [],
   "source": [
    "#9 three functions to get the data types\n",
    "int(),str(),float() these are the functions used to give thier required values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "renewable-career",
   "metadata": {},
   "outputs": [],
   "source": [
    "#10\n",
    "'I have eaten' + 99 +  'burritos'\n",
    "it will give error because the string wont be called with integer use we can use concatenate using str() this is of one method of concatenation \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "acceptable-howard",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'i have eaten  99 burritos'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " 'i have eaten  ' + str(99)+' burritos'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "excited-insured",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
